/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace io.thp.psmove {

using System;
using System.Runtime.InteropServices;

class psmoveapi_csharpPINVOKE {

  protected class SWIGExceptionHelper {

    public delegate void ExceptionDelegate(string message);
    public delegate void ExceptionArgumentDelegate(string message, string paramName);

    static ExceptionDelegate applicationDelegate = new ExceptionDelegate(SetPendingApplicationException);
    static ExceptionDelegate arithmeticDelegate = new ExceptionDelegate(SetPendingArithmeticException);
    static ExceptionDelegate divideByZeroDelegate = new ExceptionDelegate(SetPendingDivideByZeroException);
    static ExceptionDelegate indexOutOfRangeDelegate = new ExceptionDelegate(SetPendingIndexOutOfRangeException);
    static ExceptionDelegate invalidCastDelegate = new ExceptionDelegate(SetPendingInvalidCastException);
    static ExceptionDelegate invalidOperationDelegate = new ExceptionDelegate(SetPendingInvalidOperationException);
    static ExceptionDelegate ioDelegate = new ExceptionDelegate(SetPendingIOException);
    static ExceptionDelegate nullReferenceDelegate = new ExceptionDelegate(SetPendingNullReferenceException);
    static ExceptionDelegate outOfMemoryDelegate = new ExceptionDelegate(SetPendingOutOfMemoryException);
    static ExceptionDelegate overflowDelegate = new ExceptionDelegate(SetPendingOverflowException);
    static ExceptionDelegate systemDelegate = new ExceptionDelegate(SetPendingSystemException);

    static ExceptionArgumentDelegate argumentDelegate = new ExceptionArgumentDelegate(SetPendingArgumentException);
    static ExceptionArgumentDelegate argumentNullDelegate = new ExceptionArgumentDelegate(SetPendingArgumentNullException);
    static ExceptionArgumentDelegate argumentOutOfRangeDelegate = new ExceptionArgumentDelegate(SetPendingArgumentOutOfRangeException);

    [DllImport("psmoveapi_csharp", EntryPoint="SWIGRegisterExceptionCallbacks_psmoveapi_csharp")]
    public static extern void SWIGRegisterExceptionCallbacks_psmoveapi_csharp(
                                ExceptionDelegate applicationDelegate,
                                ExceptionDelegate arithmeticDelegate,
                                ExceptionDelegate divideByZeroDelegate, 
                                ExceptionDelegate indexOutOfRangeDelegate, 
                                ExceptionDelegate invalidCastDelegate,
                                ExceptionDelegate invalidOperationDelegate,
                                ExceptionDelegate ioDelegate,
                                ExceptionDelegate nullReferenceDelegate,
                                ExceptionDelegate outOfMemoryDelegate, 
                                ExceptionDelegate overflowDelegate, 
                                ExceptionDelegate systemExceptionDelegate);

    [DllImport("psmoveapi_csharp", EntryPoint="SWIGRegisterExceptionArgumentCallbacks_psmoveapi_csharp")]
    public static extern void SWIGRegisterExceptionCallbacksArgument_psmoveapi_csharp(
                                ExceptionArgumentDelegate argumentDelegate,
                                ExceptionArgumentDelegate argumentNullDelegate,
                                ExceptionArgumentDelegate argumentOutOfRangeDelegate);

    static void SetPendingApplicationException(string message) {
      SWIGPendingException.Set(new System.ApplicationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArithmeticException(string message) {
      SWIGPendingException.Set(new System.ArithmeticException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingDivideByZeroException(string message) {
      SWIGPendingException.Set(new System.DivideByZeroException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIndexOutOfRangeException(string message) {
      SWIGPendingException.Set(new System.IndexOutOfRangeException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidCastException(string message) {
      SWIGPendingException.Set(new System.InvalidCastException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingInvalidOperationException(string message) {
      SWIGPendingException.Set(new System.InvalidOperationException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingIOException(string message) {
      SWIGPendingException.Set(new System.IO.IOException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingNullReferenceException(string message) {
      SWIGPendingException.Set(new System.NullReferenceException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOutOfMemoryException(string message) {
      SWIGPendingException.Set(new System.OutOfMemoryException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingOverflowException(string message) {
      SWIGPendingException.Set(new System.OverflowException(message, SWIGPendingException.Retrieve()));
    }
    static void SetPendingSystemException(string message) {
      SWIGPendingException.Set(new System.SystemException(message, SWIGPendingException.Retrieve()));
    }

    static void SetPendingArgumentException(string message, string paramName) {
      SWIGPendingException.Set(new System.ArgumentException(message, paramName, SWIGPendingException.Retrieve()));
    }
    static void SetPendingArgumentNullException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentNullException(paramName, message));
    }
    static void SetPendingArgumentOutOfRangeException(string message, string paramName) {
      Exception e = SWIGPendingException.Retrieve();
      if (e != null) message = message + " Inner Exception: " + e.Message;
      SWIGPendingException.Set(new System.ArgumentOutOfRangeException(paramName, message));
    }

    static SWIGExceptionHelper() {
      SWIGRegisterExceptionCallbacks_psmoveapi_csharp(
                                applicationDelegate,
                                arithmeticDelegate,
                                divideByZeroDelegate,
                                indexOutOfRangeDelegate,
                                invalidCastDelegate,
                                invalidOperationDelegate,
                                ioDelegate,
                                nullReferenceDelegate,
                                outOfMemoryDelegate,
                                overflowDelegate,
                                systemDelegate);

      SWIGRegisterExceptionCallbacksArgument_psmoveapi_csharp(
                                argumentDelegate,
                                argumentNullDelegate,
                                argumentOutOfRangeDelegate);
    }
  }

  protected static SWIGExceptionHelper swigExceptionHelper = new SWIGExceptionHelper();

  public class SWIGPendingException {
    [ThreadStatic]
    private static Exception pendingException = null;
    private static int numExceptionsPending = 0;

    public static bool Pending {
      get {
        bool pending = false;
        if (numExceptionsPending > 0)
          if (pendingException != null)
            pending = true;
        return pending;
      } 
    }

    public static void Set(Exception e) {
      if (pendingException != null)
        throw new ApplicationException("FATAL: An earlier pending exception from unmanaged code was missed and thus not thrown (" + pendingException.ToString() + ")", e);
      pendingException = e;
      lock(typeof(psmoveapi_csharpPINVOKE)) {
        numExceptionsPending++;
      }
    }

    public static Exception Retrieve() {
      Exception e = null;
      if (numExceptionsPending > 0) {
        if (pendingException != null) {
          e = pendingException;
          pendingException = null;
          lock(typeof(psmoveapi_csharpPINVOKE)) {
            numExceptionsPending--;
          }
        }
      }
      return e;
    }
  }


  protected class SWIGStringHelper {

    public delegate string SWIGStringDelegate(string message);
    static SWIGStringDelegate stringDelegate = new SWIGStringDelegate(CreateString);

    [DllImport("psmoveapi_csharp", EntryPoint="SWIGRegisterStringCallback_psmoveapi_csharp")]
    public static extern void SWIGRegisterStringCallback_psmoveapi_csharp(SWIGStringDelegate stringDelegate);

    static string CreateString(string cString) {
      return cString;
    }

    static SWIGStringHelper() {
      SWIGRegisterStringCallback_psmoveapi_csharp(stringDelegate);
    }
  }

  static protected SWIGStringHelper swigStringHelper = new SWIGStringHelper();


  static psmoveapi_csharpPINVOKE() {
  }


  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_init")]
  public static extern int psmove_init(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_set_remote_config")]
  public static extern void psmove_set_remote_config(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_count_connected")]
  public static extern int psmove_count_connected();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_connect")]
  public static extern IntPtr psmove_connect();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_connect_by_id")]
  public static extern IntPtr psmove_connect_by_id(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_connection_type")]
  public static extern int psmove_connection_type(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_is_remote")]
  public static extern int psmove_is_remote(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_serial")]
  public static extern string psmove_get_serial(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_pair")]
  public static extern int psmove_pair(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_pair_custom")]
  public static extern int psmove_pair_custom(HandleRef jarg1, string jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_set_rate_limiting")]
  public static extern void psmove_set_rate_limiting(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_set_leds")]
  public static extern void psmove_set_leds(HandleRef jarg1, byte jarg2, byte jarg3, byte jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_set_rumble")]
  public static extern void psmove_set_rumble(HandleRef jarg1, byte jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_update_leds")]
  public static extern int psmove_update_leds(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_poll")]
  public static extern int psmove_poll(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_buttons")]
  public static extern uint psmove_get_buttons(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_button_events")]
  public static extern void psmove_get_button_events(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_battery")]
  public static extern int psmove_get_battery(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_temperature")]
  public static extern int psmove_get_temperature(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_temperature_in_celsius")]
  public static extern float psmove_get_temperature_in_celsius(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_trigger")]
  public static extern byte psmove_get_trigger(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_accelerometer")]
  public static extern void psmove_get_accelerometer(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_gyroscope")]
  public static extern void psmove_get_gyroscope(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_magnetometer")]
  public static extern void psmove_get_magnetometer(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_accelerometer_frame")]
  public static extern void psmove_get_accelerometer_frame(HandleRef jarg1, int jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_gyroscope_frame")]
  public static extern void psmove_get_gyroscope_frame(HandleRef jarg1, int jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_magnetometer_vector")]
  public static extern void psmove_get_magnetometer_vector(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_has_calibration")]
  public static extern int psmove_has_calibration(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_dump_calibration")]
  public static extern void psmove_dump_calibration(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_enable_orientation")]
  public static extern void psmove_enable_orientation(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_has_orientation")]
  public static extern int psmove_has_orientation(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_orientation")]
  public static extern void psmove_get_orientation(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_reset_orientation")]
  public static extern void psmove_reset_orientation(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_reset_magnetometer_calibration")]
  public static extern void psmove_reset_magnetometer_calibration(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_save_magnetometer_calibration")]
  public static extern void psmove_save_magnetometer_calibration(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_get_magnetometer_calibration_range")]
  public static extern int psmove_get_magnetometer_calibration_range(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_disconnect")]
  public static extern void psmove_disconnect(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_reinit")]
  public static extern void psmove_reinit();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_util_get_ticks")]
  public static extern int psmove_util_get_ticks();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_util_get_data_dir")]
  public static extern string psmove_util_get_data_dir();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_util_get_file_path")]
  public static extern string psmove_util_get_file_path(string jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_util_get_system_file_path")]
  public static extern string psmove_util_get_system_file_path(string jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_util_get_env_int")]
  public static extern int psmove_util_get_env_int(string jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_util_get_env_string")]
  public static extern string psmove_util_get_env_string(string jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_connection_type_get")]
  public static extern int PSMove_connection_type_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_ax_get")]
  public static extern int PSMove_ax_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_ay_get")]
  public static extern int PSMove_ay_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_az_get")]
  public static extern int PSMove_az_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_gx_get")]
  public static extern int PSMove_gx_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_gy_get")]
  public static extern int PSMove_gy_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_gz_get")]
  public static extern int PSMove_gz_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_mx_get")]
  public static extern int PSMove_mx_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_my_get")]
  public static extern int PSMove_my_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_mz_get")]
  public static extern int PSMove_mz_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMove__SWIG_0")]
  public static extern IntPtr new_PSMove__SWIG_0();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMove__SWIG_1")]
  public static extern IntPtr new_PSMove__SWIG_1(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_accelerometer_frame")]
  public static extern void PSMove_get_accelerometer_frame(HandleRef jarg1, int jarg2, out float jarg3, out float jarg4, out float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_gyroscope_frame")]
  public static extern void PSMove_get_gyroscope_frame(HandleRef jarg1, int jarg2, out float jarg3, out float jarg4, out float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_magnetometer_vector")]
  public static extern void PSMove_get_magnetometer_vector(HandleRef jarg1, out float jarg2, out float jarg3, out float jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_enable_orientation")]
  public static extern void PSMove_enable_orientation(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_has_orientation")]
  public static extern int PSMove_has_orientation(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_has_calibration")]
  public static extern int PSMove_has_calibration(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_orientation")]
  public static extern void PSMove_get_orientation(HandleRef jarg1, out float jarg2, out float jarg3, out float jarg4, out float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_reset_orientation")]
  public static extern void PSMove_reset_orientation(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_set_leds")]
  public static extern void PSMove_set_leds(HandleRef jarg1, int jarg2, int jarg3, int jarg4);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_set_rumble")]
  public static extern void PSMove_set_rumble(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_update_leds")]
  public static extern int PSMove_update_leds(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_set_rate_limiting")]
  public static extern void PSMove_set_rate_limiting(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_pair")]
  public static extern int PSMove_pair(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_pair_custom")]
  public static extern int PSMove_pair_custom(HandleRef jarg1, string jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_serial")]
  public static extern string PSMove_get_serial(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_is_remote")]
  public static extern int PSMove_is_remote(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_poll")]
  public static extern int PSMove_poll(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_buttons")]
  public static extern int PSMove_get_buttons(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_button_events")]
  public static extern void PSMove_get_button_events(HandleRef jarg1, out uint jarg2, out uint jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_battery")]
  public static extern int PSMove_get_battery(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_temperature")]
  public static extern int PSMove_get_temperature(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_temperature_in_celsius")]
  public static extern float PSMove_get_temperature_in_celsius(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMove_get_trigger")]
  public static extern int PSMove_get_trigger(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_delete_PSMove")]
  public static extern void delete_PSMove(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_DEFAULT_WIDTH_get")]
  public static extern int PSMOVE_TRACKER_DEFAULT_WIDTH_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_DEFAULT_HEIGHT_get")]
  public static extern int PSMOVE_TRACKER_DEFAULT_HEIGHT_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_MAX_CONTROLLERS_get")]
  public static extern int PSMOVE_TRACKER_MAX_CONTROLLERS_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_CAMERA_ENV_get")]
  public static extern string PSMOVE_TRACKER_CAMERA_ENV_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_FILENAME_ENV_get")]
  public static extern string PSMOVE_TRACKER_FILENAME_ENV_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_ROI_SIZE_ENV_get")]
  public static extern string PSMOVE_TRACKER_ROI_SIZE_ENV_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_COLOR_ENV_get")]
  public static extern string PSMOVE_TRACKER_COLOR_ENV_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_WIDTH_ENV_get")]
  public static extern string PSMOVE_TRACKER_WIDTH_ENV_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMOVE_TRACKER_HEIGHT_ENV_get")]
  public static extern string PSMOVE_TRACKER_HEIGHT_ENV_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_data_set")]
  public static extern void PSMoveTrackerRGBImage_data_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_data_get")]
  public static extern IntPtr PSMoveTrackerRGBImage_data_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_width_set")]
  public static extern void PSMoveTrackerRGBImage_width_set(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_width_get")]
  public static extern int PSMoveTrackerRGBImage_width_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_height_set")]
  public static extern void PSMoveTrackerRGBImage_height_set(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_height_get")]
  public static extern int PSMoveTrackerRGBImage_height_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTrackerRGBImage_size_get")]
  public static extern int PSMoveTrackerRGBImage_size_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMoveTrackerRGBImage")]
  public static extern IntPtr new_PSMoveTrackerRGBImage();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_delete_PSMoveTrackerRGBImage")]
  public static extern void delete_PSMoveTrackerRGBImage(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_create_default")]
  public static extern IntPtr psmove_tracker_create_default();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_exposure_lock_init")]
  public static extern IntPtr psmove_tracker_exposure_lock_init();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_exposure_lock_process")]
  public static extern void psmove_tracker_exposure_lock_process(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_exposure_lock_finish")]
  public static extern void psmove_tracker_exposure_lock_finish(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_new")]
  public static extern IntPtr psmove_tracker_new();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_new_with_camera")]
  public static extern IntPtr psmove_tracker_new_with_camera(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_set_auto_update_leds")]
  public static extern void psmove_tracker_set_auto_update_leds(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_auto_update_leds")]
  public static extern int psmove_tracker_get_auto_update_leds(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_set_dimming")]
  public static extern void psmove_tracker_set_dimming(HandleRef jarg1, float jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_dimming")]
  public static extern float psmove_tracker_get_dimming(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_set_exposure")]
  public static extern void psmove_tracker_set_exposure(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_exposure")]
  public static extern int psmove_tracker_get_exposure(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_enable_deinterlace")]
  public static extern void psmove_tracker_enable_deinterlace(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_set_mirror")]
  public static extern void psmove_tracker_set_mirror(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_mirror")]
  public static extern int psmove_tracker_get_mirror(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_enable")]
  public static extern int psmove_tracker_enable(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_enable_with_color")]
  public static extern int psmove_tracker_enable_with_color(HandleRef jarg1, HandleRef jarg2, byte jarg3, byte jarg4, byte jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_disable")]
  public static extern void psmove_tracker_disable(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_color")]
  public static extern int psmove_tracker_get_color(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_camera_color")]
  public static extern int psmove_tracker_get_camera_color(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_set_camera_color")]
  public static extern int psmove_tracker_set_camera_color(HandleRef jarg1, HandleRef jarg2, byte jarg3, byte jarg4, byte jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_status")]
  public static extern int psmove_tracker_get_status(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_update_image")]
  public static extern void psmove_tracker_update_image(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_update")]
  public static extern int psmove_tracker_update(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_annotate")]
  public static extern void psmove_tracker_annotate(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_frame")]
  public static extern IntPtr psmove_tracker_get_frame(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_image")]
  public static extern IntPtr psmove_tracker_get_image(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_position")]
  public static extern int psmove_tracker_get_position(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_get_size")]
  public static extern void psmove_tracker_get_size(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_distance_from_radius")]
  public static extern float psmove_tracker_distance_from_radius(HandleRef jarg1, float jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_set_distance_parameters")]
  public static extern void psmove_tracker_set_distance_parameters(HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_tracker_free")]
  public static extern void psmove_tracker_free(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSEYE_FOV_BLUE_DOT_get")]
  public static extern int PSEYE_FOV_BLUE_DOT_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSEYE_FOV_RED_DOT_get")]
  public static extern int PSEYE_FOV_RED_DOT_get();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveMatrix4x4_m_set")]
  public static extern void PSMoveMatrix4x4_m_set(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveMatrix4x4_m_get")]
  public static extern IntPtr PSMoveMatrix4x4_m_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveMatrix4x4_at")]
  public static extern float PSMoveMatrix4x4_at(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMoveMatrix4x4")]
  public static extern IntPtr new_PSMoveMatrix4x4();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_delete_PSMoveMatrix4x4")]
  public static extern void delete_PSMoveMatrix4x4(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_fusion_new")]
  public static extern IntPtr psmove_fusion_new(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_fusion_get_projection_matrix")]
  public static extern IntPtr psmove_fusion_get_projection_matrix(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_fusion_get_modelview_matrix")]
  public static extern IntPtr psmove_fusion_get_modelview_matrix(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_fusion_get_position")]
  public static extern void psmove_fusion_get_position(HandleRef jarg1, HandleRef jarg2, HandleRef jarg3, HandleRef jarg4, HandleRef jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_psmove_fusion_free")]
  public static extern void psmove_fusion_free(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_dimming_set")]
  public static extern void PSMoveTracker_dimming_set(HandleRef jarg1, float jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_dimming_get")]
  public static extern float PSMoveTracker_dimming_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_exposure_set")]
  public static extern void PSMoveTracker_exposure_set(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_exposure_get")]
  public static extern int PSMoveTracker_exposure_get(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMoveTracker__SWIG_0")]
  public static extern IntPtr new_PSMoveTracker__SWIG_0();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMoveTracker__SWIG_1")]
  public static extern IntPtr new_PSMoveTracker__SWIG_1(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_enable")]
  public static extern int PSMoveTracker_enable(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_enable_with_color")]
  public static extern int PSMoveTracker_enable_with_color(HandleRef jarg1, HandleRef jarg2, int jarg3, int jarg4, int jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_annotate")]
  public static extern void PSMoveTracker_annotate(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_disable")]
  public static extern void PSMoveTracker_disable(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_set_auto_update_leds")]
  public static extern void PSMoveTracker_set_auto_update_leds(HandleRef jarg1, HandleRef jarg2, int jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_auto_update_leds")]
  public static extern int PSMoveTracker_get_auto_update_leds(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_color")]
  public static extern void PSMoveTracker_get_color(HandleRef jarg1, HandleRef jarg2, out byte jarg3, out byte jarg4, out byte jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_camera_color")]
  public static extern void PSMoveTracker_get_camera_color(HandleRef jarg1, HandleRef jarg2, out byte jarg3, out byte jarg4, out byte jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_set_camera_color")]
  public static extern int PSMoveTracker_set_camera_color(HandleRef jarg1, HandleRef jarg2, byte jarg3, byte jarg4, byte jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_enable_deinterlace")]
  public static extern void PSMoveTracker_enable_deinterlace(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_set_mirror")]
  public static extern void PSMoveTracker_set_mirror(HandleRef jarg1, int jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_mirror")]
  public static extern int PSMoveTracker_get_mirror(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_status")]
  public static extern int PSMoveTracker_get_status(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_update_image")]
  public static extern void PSMoveTracker_update_image(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_update__SWIG_0")]
  public static extern int PSMoveTracker_update__SWIG_0(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_update__SWIG_1")]
  public static extern int PSMoveTracker_update__SWIG_1(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_image")]
  public static extern IntPtr PSMoveTracker_get_image(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_position")]
  public static extern void PSMoveTracker_get_position(HandleRef jarg1, HandleRef jarg2, out float jarg3, out float jarg4, out float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_get_size")]
  public static extern void PSMoveTracker_get_size(HandleRef jarg1, out int jarg2, out int jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_distance_from_radius")]
  public static extern float PSMoveTracker_distance_from_radius(HandleRef jarg1, float jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveTracker_set_distance_parameters")]
  public static extern void PSMoveTracker_set_distance_parameters(HandleRef jarg1, float jarg2, float jarg3, float jarg4, float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_delete_PSMoveTracker")]
  public static extern void delete_PSMoveTracker(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_new_PSMoveFusion")]
  public static extern IntPtr new_PSMoveFusion(HandleRef jarg1, float jarg2, float jarg3);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_delete_PSMoveFusion")]
  public static extern void delete_PSMoveFusion(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveFusion_get_position")]
  public static extern void PSMoveFusion_get_position(HandleRef jarg1, HandleRef jarg2, out float jarg3, out float jarg4, out float jarg5);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveFusion_get_projection_matrix")]
  public static extern IntPtr PSMoveFusion_get_projection_matrix(HandleRef jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_PSMoveFusion_get_modelview_matrix")]
  public static extern IntPtr PSMoveFusion_get_modelview_matrix(HandleRef jarg1, HandleRef jarg2);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_init")]
  public static extern int init(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_set_remote_config")]
  public static extern void set_remote_config(int jarg1);

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_count_connected")]
  public static extern int count_connected();

  [DllImport("psmoveapi_csharp", EntryPoint="CSharp_reinit")]
  public static extern void reinit();
}

}
